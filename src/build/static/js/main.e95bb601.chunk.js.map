{"version":3,"sources":["components/Loading.tsx","components/NoSearch.tsx","components/LocationCard.tsx","components/HospitalList.tsx","App.tsx","serviceWorker.ts","index.tsx","files/medical.svg"],"names":["Loading","antIcon","LoadingOutlined","style","fontSize","spin","className","indicator","NoSearch","src","medical","LocationCard","locationDetails","name","formatted_address","rating","HospitalList","hospitals","map","item","App","Input","Search","conditionalElement","Option","Select","useState","locationData","setLocationData","searchInput","setSearchInput","handleDispatch","a","searchQuery","radius","latitude","longitude","error","loading","success","console","log","fetch","method","headers","body","JSON","stringify","querySearch","geoFence","response","ok","Error","json","resData","data","results","undefined","displayLocationInfo","position","lng","coords","lat","handleLocationError","useEffect","navigator","geolocation","getCurrentPosition","timeout","type","id","onChange","value","target","placeholder","onClick","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.e95bb601.chunk.js","sourcesContent":["import React from 'react'\nimport { Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport '../styles/loading.css'\n\nexport const Loading=()=>{\n    const antIcon = <LoadingOutlined style={{ fontSize: 35 }} spin />;\n\n    return (\n        <div className='loading-wrapper'>\n             <Spin indicator={antIcon} />\n        </div>\n       \n    )\n}\n\n\n","import React from 'react'\nimport medical from '../files/medical.svg'\nimport '../styles/noItem.css'\n\nexport const NoSearch=()=>{\n\n    return (\n        <div className='no-search-wrapper'>\n            <div className='no-search-image-wrapper'>\n                <img src={medical} />\n            </div>\n            <div className='no-search-text'>\n                No search yet.\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport '../styles/itemCard.css'\n\ninterface LocationInterface{\n    business_Status: string | null\n     formatted_address: string | null\n     geometry: object | null\n     name: string\n     rating: number\n     user_rating_total: number\n     photo: any[]\n     distance: number\n }\n \ninterface LocationProps {\n    locationDetails: LocationInterface\n}\n\nexport const LocationCard=({locationDetails}: LocationProps)=>{\n    return(\n       \n            <div className='card-info'>\n                <div className='name'>{locationDetails.name}</div>\n                <div className='address-distance'>\n                    {locationDetails.formatted_address}\n                </div>\n                <div className='business-rating'>\n                   \n                    <span className='rating'>Rating:  {locationDetails.rating}</span>\n                </div>\n            </div>\n    )\n}","import React from 'react'\nimport {LocationCard} from './LocationCard'\nimport '../styles/hospitalList.css'\n\ninterface LocationProps {\n    hospitals: any[] | undefined\n}\n\nexport const HospitalList=({hospitals}: LocationProps)=>{\n    return(\n        <div className='item-card-wrapper'>\n            {hospitals?.map(item =><LocationCard locationDetails={item} />)}\n        </div>\n    )\n}","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport { Input, Select} from 'antd'\nimport{Loading} from './components/Loading'\nimport { logDOM } from '@testing-library/react';\nimport { resolve } from 'dns';\nimport { type } from 'os';\nimport {NoSearch} from './components/NoSearch'\nimport {HospitalList} from './components/HospitalList'\n\n\nfunction App() {\n  const { Search} = Input\n  const {Option} = Select\n\n  \n  \n\n  interface Result{\n    business_Status: string | null\n     formatted_address: string | null\n     geometry: object | null\n     name: string\n     rating: number\n     user_rating_total: number\n     photo: any[]\n     distance: number\n  }\n\n  interface Hospitals{\n    hospitals: any[] | undefined\n    error: object | undefined\n    loading: boolean\n    success: boolean \n  }\n\n  interface Input{\n    searchQuery: string | undefined\n    radius: number | undefined\n    latitude: number | undefined\n    longitude: number | undefined\n    error: string | undefined\n  \n\n  }\n\n  interface ErrorCode{\n    code: number\n  }\n  \n  interface CooordObject{ \n    longitude: number\n    latitude: number\n  }\n  \n  interface Coords{\n    coords: CooordObject\n  }\n\n  interface Notv{\n    target: any\n  }\n\n \n  interface ResultObject{\n    results: object[]\n  }\n\n  interface HospitalsObject{\n    data: ResultObject\n  }\n\n \n\n  const [locationData, setLocationData] = useState<Hospitals | null>(null)\n  const [searchInput, setSearchInput] = useState<Input | null>(null)\n\n  const handleDispatch= async ()=>{\n    if(typeof searchInput?.searchQuery === 'string'){\n      setSearchInput({\n        searchQuery: searchInput?.searchQuery, \n        radius: searchInput?.radius, \n        latitude: searchInput?.latitude, \n        longitude: searchInput?.longitude,\n        error: ''\n      })\n      setLocationData({\n        hospitals: locationData?.hospitals,\n        error: locationData?.error,\n        loading: true,\n        success: false\n\n\n\n      })\n      console.log(locationData)\n      try{\n      const response = await fetch('/api',{\n        method: 'POST',\n        headers:{\n          'Content-Type': 'application/json'\n      },\n        body: JSON.stringify({\n          querySearch: searchInput?.searchQuery,\n          geoFence: searchInput?.radius,\n          latitude: searchInput?.latitude,\n          longitude: searchInput?.latitude,\n        })\n      })\n      if(!response.ok){\n        throw new Error('Server error')\n      }\n      const resData: HospitalsObject = await response.json()\n      setLocationData({hospitals: resData.data.results, error: undefined, loading: false, success:true})\n      }catch(error){\n        console.log(error)\n        setLocationData({\n          hospitals: locationData?.hospitals,\n          error: error,\n          loading: false,\n          success: false\n        })\n      }\n    }else{\n      setSearchInput({\n        searchQuery: searchInput?.searchQuery, \n        radius: searchInput?.radius, \n        latitude: searchInput?.latitude, \n        longitude: searchInput?.longitude,\n        error: 'Search input is empty'\n      })\n    }\n  }\n\n\n  const handleGeoPermission=()=>{\n    navigator.geolocation.getCurrentPosition(\n      displayLocationInfo,\n      handleLocationError,\n      { timeout: 5000 }\n    );\n  }\n  const displayLocationInfo=(position: Coords)=>{\n    const lng = position.coords.longitude\n    const lat = position.coords.latitude\n\n    setSearchInput({\n      searchQuery: searchInput?.searchQuery, \n      radius: searchInput?.radius, \n      latitude: lat, \n      longitude: lng,\n      error: ''\n    })\n\n  }\n\n  const handleLocationError=(error: ErrorCode)=>{\n    setSearchInput({\n      searchQuery: searchInput?.searchQuery, \n      radius: searchInput?.radius, \n      latitude: searchInput?.latitude, \n      longitude: searchInput?.longitude,\n      error: 'Permission to get your location denied. Location finder cannot without knowing your location'\n    })\n    \n  }\n\n\n  const handleSelectChange=(value: number)=>{\n    setSearchInput({\n      searchQuery: searchInput?.searchQuery,\n      radius: value,\n      latitude: searchInput?.latitude, \n      longitude: searchInput?.longitude,\n      error: searchInput?.error\n    })\n  }\n\n \n  const handleSearchQuery=(value: Notv )=>{\n  \n        setSearchInput({\n          searchQuery: value.target.value, \n          radius: searchInput?.radius, \n          latitude: searchInput?.latitude, \n          longitude: searchInput?.longitude,\n          error: searchInput?.error\n        })\n    \n  }\n\n  useEffect(()=>{\n    handleGeoPermission()\n  }, [])\n\n\n  let conditionalElement: any;\n  if(!locationData?.success && !locationData?.loading){\n    conditionalElement = <NoSearch />\n  }else if(locationData.loading){\n    conditionalElement = <Loading />\n  }else{\n    conditionalElement = <HospitalList hospitals={locationData.hospitals}/>\n  }\n  return (\n    <div className=\"App\">\n     \n      <div className='header-wrapper'>\n        <div className='website-name'>\n          HospitalFinder\n        </div>\n        <div className='text-wrapper'>\n        <p className='header-main-text'>Find nearest hospital around you</p>\n        <p className='header-sec-text'>Emergency situation require quick findings</p>\n        </div>\n        <div className='input-wrapper'>\n        <div className='search-wrapper'>\n          <input\n          type='text'\n          name='search'\n          id='search'\n          onChange={handleSearchQuery}\n          placeholder='Search hospitals'\n          className='search-input'\n          />\n          <div onClick={handleDispatch} className='submit'><span className='search-button'>Search</span></div>\n        </div>\n        {searchInput?.error && <div className='error'>Search input is empty</div>}\n        <Select\n        style={{ width: 200 }}\n        placeholder=\"Choose a radius\"\n        onChange={handleSelectChange}\n        className='select'\n        >\n        <Option value={10000} >10km</Option>\n        <Option value={20000}>20km</Option>\n        <Option value={30000}>30km</Option>\n        <Option value={50000}>50km</Option>\n        </Select>\n          \n        </div>\n      </div>\n      {conditionalElement}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/medical.116d4ad4.svg\";"],"sourceRoot":""}